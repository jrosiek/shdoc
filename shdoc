#!/usr/bin/awk -f

# Logging
function syntax_error(message) {
  print FILENAME ":" FNR ": syntax_error: " message "\n\t" $0 > "/dev/stderr"
  failure = 1 # Do not execute actions in for END pattern
  exit 1
}

function warning(message) {
  print FILENAME ":" FNR ": warning: " message > "/dev/stderr"
}

# State management
function dispatch(pattern_name,
                  handler_name, unexpected_handler_name, old_state)
{
    handler_name = "handle_" pattern_name "_in_" state
    unexpected_handler_name = "handle_unexpected_in_" state
    if (!(handler_name in PROCINFO["identifiers"])) {
        if (unexpected_handler_name in PROCINFO["identifiers"]) {
            old_state = state
            @unexpected_handler_name(pattern_name)
            if (old_state == state)
                syntax_error(sprintf("unexpected pattern '%s' in state '%s'", pattern_name, old_state))

            # Redispatch in new state
            dispatch(pattern_name)
        } else
            syntax_error(sprintf("unexpected pattern '%s' in state '%s'", pattern_name, state))
    }
    @handler_name()
    next
}

# Utilities
function trim(text)
{
    return gensub(/^[[:space:]]*/, "", "g", gensub(/[[:space:]]*$/, "", "g", text))
}


BEGIN {
  if (! style) {
    style = "github"
  }

  styles["github", "title", "from"] = ".*"
  styles["github", "title", "to"] = "# &"

  styles["github", "h1", "from"] = ".*"
  styles["github", "h1", "to"] = "## &"

  styles["github", "h2", "from"] = ".*"
  styles["github", "h2", "to"] = "### &"

  styles["github", "h3", "from"] = ".*"
  styles["github", "h3", "to"] = "#### &"

  styles["github", "code", "from"] = ".*"
  styles["github", "code", "to"] = "```&"

  styles["github", "/code", "to"] = "```"

  styles["github", "argN", "from"] = "^(\\$[0-9]+) (\\S+)"
  styles["github", "argN", "to"] = "**\\1** (\\2):"

  styles["github", "arg@", "from"] = "^\\$@ (\\S+)"
  styles["github", "arg@", "to"] = "**...** (\\1):"

  styles["github", "li", "from"] = ".*"
  styles["github", "li", "to"] = "-   &"

  styles["github", "i", "from"] = ".*"
  styles["github", "i", "to"] = "_&_"

  styles["github", "b", "from"] = ".*"
  styles["github", "b", "to"] = "**&**"

  styles["github", "c", "from"] = ".*"
  styles["github", "c", "to"] = "`&`"
  
  styles["github", "sup", "from"] = ".*"
  styles["github", "sup", "to"] = "<sup>&</sup>"

  styles["github", "anchor", "from"] = ".*"
  styles["github", "anchor", "to"] = "[&](#&)"

  styles["github", "exitcode", "from"] = "([0-9]) (.*)"
  styles["github", "exitcode", "to"] = "**\\1**: \\2"
}

BEGINFILE {
    state = "header"

    current_module = ""
}

# Action handlers
function handle_module_in_header()
{
    sub(/^# @module /, "")
    current_module = trim($0)

    modules[current_module][""] = 1
}

function handle_unexpected_in_header(pattern_name)
{
    state = "body"
}

function handle_func_in_body()
{
    sub(/^# @func/, "")

    delete current_func
    current_func["blocks"][0] = trim($0)

    state = "func"
}

function common_handle_comment_in_func( \
                                       text)
{
    sub(/^#/, "")
    text = trim($0)

    if (text == "")
        text = "\n\n"
    else
        text = " " text

    current_func["blocks"][length(current_func["blocks"])-1] = current_func["blocks"][length(current_func["blocks"])-1] text
    print "<" current_func["blocks"][length(current_func["blocks"])-1] ">"
}

function handle_comment_in_func() { common_handle_comment_in_func() }


# Patterns

/^# @module /                   { dispatch("module") }
/^# @func([[:space:]]|$)/       { dispatch("func") }

/^#[[:space:]]*@/       { dispatch("unknown_directive") }
/^[#]/                  { dispatch("comment") }

# Non-comments
/^(function ([a-zA-Z0-9_:\-\.]+)|([a-zA-Z0-9_:\-\.]+)\(\))/ {
    dispatch("func_decl")
}
1                       { dispatch("content") }





#function render(type, text) {
#  return gensub( \
#    styles[style, type, "from"],
#    styles[style, type, "to"],
#    "g",
#    text \
#  )
#}
#
#function mdescape(text) {
#  # Escape characters
#  gsub(/\$_/, "$\\_", text)
#  gsub(/ _/, " \\_", text)
#  gsub(/(.+)\*/, "\1\\*", text)
#  return text
#}
#
#function syntax_error(message) {
#  print FILENAME ":" FNR ": syntax_error: " message > "/dev/stderr"
#  exit 1
#}
#
#function warning(message) {
#  print FILENAME ":" FNR ": warning: " message > "/dev/stderr"
#}
#
#BEGINFILE {
#  module_name=""
#}
#
#in_block {
#  last_block = in_block
#  if ( /^# ?$/ ) {
#    emptyline = 1
#  } else if ( /^[^#]|^# @|^##+/ ) {
#    if (in_block == "code") {
#      docblock = docblock "\n" render("/code") "\n"
#    }
#    in_block = 0
#    emptyline = 0
#  } else if (in_block == "code") {
#    if (! /^#[ ]{3}/) {
#      in_block = 0
#      docblock = docblock "\n" render("/code") "\n"
#    } else {
#      sub(/^#[ ]{3}/, "")
#
#      docblock = docblock "\n" $0
#    }
#  } else if (in_block == "title") {
#    sub(/^# */, "")
#
#    titleblock = titleblock "\n" $0
#  } else if (in_block == "description") {
#    sub(/^# ?/, "")
#
#    if (emptyline) {
#      docblock = docblock "\n"
#      emptyline = 0
#    }
#    docblock = docblock "\n" mdescape($0)
#  } else if (in_block == "return" || in_block == "var" || in_block == "param") {
#    sub(/^# */, "")
#
#    docblock = docblock "\n    " $0
#  }
#}
#
#/^# @description/ {
#  if (has_title) {
#    has_title = 0
#    if (versionblock) {
#      titleblock = titleblock "\n" render("b", "Version " versionblock) "\n"
#      versionblock = 0
#    }
#    if (authorblock != "") {
#      titleblock = titleblock "\n" render("h1", "Authors") "\n" authorblock
#      authorblock = 0
#    }
#    titleblock = titleblock "\n\n" render("h1", "TOC")
#  }
#  in_block = "description"
#
#  has_args = 0
#  has_vars = 0
#  has_return = 0
#
#  has_exitcode = 0
#  has_stdout = 0
#
#  sub(/^# @description /, "")
#  docblock = "\n" $0
#}
#
#/^# @title/ {
#  has_title = 1
#  in_block = "title"
#  sub(/^# @title /, "")
#  titleblock = render("title", $0)
#  authorblock = ""
#  versionblock = 0
#}
#
#/^# @version/ {
#  in_block = 0
#  sub(/^# @version /, "")
#  versionblock = $0
#}
#
#/^# @authors?/ {
#  in_block = 0
#  sub(/^# @author /, "")
#  authorblock = authorblock "\n" render("li", $0)
#}
#
#/^# @(example|code)/ {
#  in_block = "code"
#  docblock = docblock "\n\n" render("h3", "Example")
#  docblock = docblock "\n\n" render("code", "bash")
#
#  sub(/^# @(example|code) +/, "")
#
#  if ($0 != "") {
#    docblock = docblock "\n" $0
#  }
#}
#
#/^# @vars?/ {
#  in_block = "var"
#  if (!has_vars) {
#    has_vars = 1
#
#    docblock = docblock "\n\n" render("h2", "Variables") "\n"
#  }
#
#  sub(/^# @vars? /, "")
#
#  # Escape characters
#  gsub(/\$_/, "$\\_")
#  gsub(/ _/, " \\_")
#  gsub(/\*/, "\\*")
#  $0 = render("argN", $0)
#  #$0 = render("arg@", $0)
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^# @(args?|params?)/ {
#  in_block = "param"
#  if (!has_args) {
#    has_args = 1
#
#    docblock = docblock "\n\n" render("h2", "Arguments") "\n"
#  }
#
#  sub(/^# @(args?|params?) /, "")
#
#  # Escape characters
#  mdescape($0)
#  $0 = render("argN", $0)
#  # $0 = render("arg@", $0)
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^# @noargs?/ {
#  in_block = 0
#  docblock = docblock "\n\n" render("i", "Function has no arguments.")
#}
#
#/^# @exitcode/ {
#  in_block = "result"
#  if (!has_exitcode) {
#    has_exitcode = 1
#
#    docblock = docblock "\n\n" render("h2", "Exit codes") "\n"
#  }
#
#  sub(/^# @exitcode /, "")
#
#  $0 = render("exitcode", $0)
#
#  docblock = docblock  "\n" render("li", $0)
#}
#
#/^# @see/ {
#  in_block = "see_also"
#  sub(/# @see /, "")
#
#  $0 = render("anchor", $0)
#  $0 = render("li", $0)
#
#  docblock = docblock "\n" render("h3", "See also") "\n\n" $0
#}
#
#/^# @uses?plain/ {
#  in_block = "uses"
#  if (last_block != in_block) {
#    docblock = docblock "\n\n" render("h3", "Uses") "\n"
#  }
#
#  sub(/# @uses?plain /, "")
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^# @uses? / {
#  in_block = "uses"
#  if (last_block != in_block) {
#    docblock = docblock "\n\n" render("h3", "Uses") "\n"
#  }
#
#  sub(/# @uses? /, "")
#
#  $0 = render("anchor", $0)
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^# @returns?/ {
#  in_block = "return"
#  if (!has_return) {
#    has_return = 1;
#    docblock = docblock "\n\n" render("h2", "Returns") "\n"
#  }
#
#  sub(/^# @returns? /, "")
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^# @stdout/ {
#  in_block = "return"
#  if (!has_return) {
#    has_return = 1;
#    docblock = docblock "\n" render("h2", "Output on stdout") "\n"
#  }
#
#  sub(/^# @stdout /, "")
#
#  docblock = docblock "\n" render("li", $0)
#}
#
#/^(function ([a-zA-Z0-9_:\-\.]+)|([a-zA-Z0-9_:\-\.]+)\(\))/ {
#  sub(/^function /, "")
#  sub(/\(\)$/, "", $1)
#  if (docblock == "") {
#    warning("undocumented function: " $1);
#  } else {
#    full_name=render("c", $1)
#    if (module_name != "") {
#      full_name=render("sup", render("i", render("c", "(" module_name ")"))) " " full_name
#    }
#
#    doc = doc "\n* * *\n\n" render("h1", full_name) "\n" docblock "\n"
#
#    url = full_name
#    gsub(/\W/, "", url)
#
#    toc = toc "\n" render("li", "[" full_name "](#" url ")")
#
#    docblock = ""
#  }
#}
#
#/^# @module / {
#  sub(/^# @module /, "")
#  module_name=$0
#}
#
#/^#[ \t]{2,}@/ {
#    syntax_error("command is idented too much")
#}
#
#END {
#  print titleblock
#  print toc
#  print doc
#}
